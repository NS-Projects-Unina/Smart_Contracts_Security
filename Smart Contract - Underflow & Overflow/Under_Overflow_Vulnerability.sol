// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// OpenZeppelin Contracts
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/access/Ownable.sol";

/// @title DynamicNFT Vulnerabile (overflow/underflow + depositi Ether + metadati)
contract DynamicNFT is ERC721URIStorage, Ownable {
    uint256 private tokenCounter;
    
    mapping(uint256 => uint256) public balances; // Ether associato a NFT
    mapping(uint256 => uint8) public reputation;  // Reputazione vulnerabile a overflow/underflow

    event NFTCreated(uint256 indexed tokenId, string tokenURI);
    event MetadataUpdated(uint256 indexed tokenId, string newTokenURI);

    constructor() ERC721("DynamicNFT", "DNFT") {
        tokenCounter = 0;
    }

    /// @notice Crea un NFT dinamico con reputazione iniziale
    function createNFT(address recipient, string memory tokenURI) public onlyOwner returns (uint256) {
        uint256 newTokenId = tokenCounter;
        _safeMint(recipient, newTokenId);
        _setTokenURI(newTokenId, tokenURI);
        balances[newTokenId] = 0;
        reputation[newTokenId] = 100;
        tokenCounter += 1;
        emit NFTCreated(newTokenId, tokenURI);
        return newTokenId;
    }

    /// @notice Aggiorna i metadati dell'NFT
    function updateMetadata(uint256 tokenId, string memory newTokenURI) public {
        require(_existsInternal(tokenId), "Token ID does not exist");
        require(ownerOf(tokenId) == msg.sender, "Only the owner can update metadata");
        _setTokenURI(tokenId, newTokenURI);
        emit MetadataUpdated(tokenId, newTokenURI);
    }

    /// @notice Deposita Ether associandolo a un NFT
    function deposit(uint256 tokenId) public payable {
        require(_existsInternal(tokenId), "Token ID does not exist");
        balances[tokenId] += msg.value;
    }

    /// @notice Simula una ricompensa che può causare overflow
    function reward(uint256 tokenId) public {
        require(ownerOf(tokenId) == msg.sender, "Not your NFT");
        unchecked {
            reputation[tokenId] += 10; // Vulnerabile a overflow
        }
    }

    /// @notice Simula una penalità che può causare underflow
    function penalize(uint256 tokenId) public {
        unchecked {
            reputation[tokenId] -= 20; // Vulnerabile a underflow
        }
    }

    /// @notice Verifica se un token esiste
    function _existsInternal(uint256 tokenId) internal view returns (bool) {
        try this.ownerOf(tokenId) {
            return true;
        } catch {
            return false;
        }
    }
}
